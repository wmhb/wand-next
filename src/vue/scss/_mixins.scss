@mixin lhCrop($line-height, $capital-letter: 1) {
  &::before {
    content: '';
    display: block;
    height: 0;
    width: 0;
    margin-top: calc((#{$capital-letter} - #{$line-height}) * 0.5em);
  }
}

@mixin mq($width) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @media only screen and (min-width: $width) {
      @content;
    }
  }
}

@mixin box-shadow($size: 'default') {
  @if ($size == 'default') {
    box-shadow: 0 14px 24px rgba(0,0,0,0.1), 0 5px 10px rgba(0,0,0,0.09);
  }
  @else if($size == 'large') {
    box-shadow: 0px 10px 32.98px 1.02px rgba(0, 0, 0, 0.15), 0px 0px 3px 0px rgba(0, 0, 0, 0.05), 0px 0px 0px 0px rgba(0, 0, 0, 0.15);
  }
  @else if($size == 'small') {
    box-shadow: 0 1px 3px rgba(0,0,0,0.05), 0 1px 2px rgba(0,0,0,0.15);
  }
}

@mixin gradientOverlay($type: 'default') {
  &:before {
    content: '';
    display: block;
    width: 100%;
    height: 100%;
    position: absolute;
    left: 0;
    z-index: 1;
    top: 0;

    @if ( $type == 'default' ) {
      background: transparent linear-gradient(
                      180deg, hsla(0, 0%, 20%, 0.75) 0%,
                      hsla(0, 0%, 20%, 0.95) 100%
      );
    }
    @else if( $type == 'light' ) {
      background: transparent linear-gradient(
                      180deg, hsla(0, 0%, 20%, 0.25) 0%,
                      hsla(0, 0%, 20%, 0.75) 100%
      );
    }
  }
}

@mixin transitionScaleOnHover() {
  transition: opacity $transition-short-duration  $ease--smooth-fade,
  transform $transition-short-duration  $ease-cb;

  &:hover {
    opacity: 0.8;
    transform: scale(0.98);
  }
}
